#!/usr/bin/env python
"""
Script de test pour v√©rifier la configuration de s√©curit√© de l'API.
"""
import os
import sys
import django

# Configuration de Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

def test_permissions():
    """
    Teste les permissions configur√©es pour chaque app.
    """
    print("=== TEST DE CONFIGURATION DES PERMISSIONS ===\n")
    
    # Test des imports
    try:
        from backend.permissions import IsAdminUser, IsAdminOrReadOnly, IsAdminOrCreateOnly
        print("‚úÖ Permissions personnalis√©es import√©es avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur d'import des permissions: {e}")
        return False
    
    # Test des ViewSets
    try:
        from gin.views import FormationViewSet, InscriptionFormationViewSet
        from stages.views import OffreStageViewSet, DemandeStageViewSet
        from realisations.views import RealisationListView, RealisationCreateView
        from partenaires.views import PartenaireListCreateView
        from accounts.views import ConnexionView
        print("‚úÖ Toutes les vues import√©es avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur d'import des vues: {e}")
        return False
    
    # V√©rification des permissions par app
    print("\n=== V√âRIFICATION DES PERMISSIONS PAR APP ===")
    
    # Formations
    formation_permissions = FormationViewSet.permission_classes[0].__name__
    inscription_permissions = InscriptionFormationViewSet.permission_classes[0].__name__
    print(f"üìö Formations: {formation_permissions}")
    print(f"üìù Inscriptions formations: {inscription_permissions}")
    
    # Stages
    offre_permissions = OffreStageViewSet.permission_classes[0].__name__
    demande_permissions = DemandeStageViewSet.permission_classes[0].__name__
    print(f"üíº Offres de stage: {offre_permissions}")
    print(f"üìã Demandes de stage: {demande_permissions}")
    
    # R√©alisations
    print(f"üé® R√©alisations (lecture): AllowAny")
    print(f"üé® R√©alisations (cr√©ation): {RealisationCreateView.permission_classes[0].__name__}")
    
    # Partenaires
    partenaire_permissions = PartenaireListCreateView.permission_classes[0].__name__
    print(f"ü§ù Partenaires: {partenaire_permissions}")
    
    # Comptes
    connexion_permissions = ConnexionView.permission_classes[0].__name__
    print(f"üë• Connexion admin: {connexion_permissions}")
    
    print("\n‚úÖ Configuration des permissions v√©rifi√©e avec succ√®s!")
    return True

def test_middleware():
    """
    Teste la configuration du middleware CSRF.
    """
    print("\n=== TEST DU MIDDLEWARE CSRF ===")
    
    from django.conf import settings
    
    # V√©rifier que le middleware est dans la liste
    if 'backend.middleware.CSRFExemptAPIMiddleware' in settings.MIDDLEWARE:
        print("‚úÖ Middleware CSRFExemptAPIMiddleware configur√©")
    else:
        print("‚ùå Middleware CSRFExemptAPIMiddleware non trouv√©")
        return False
    
    # V√©rifier l'ordre du middleware
    middleware_list = settings.MIDDLEWARE
    csrf_exempt_index = middleware_list.index('backend.middleware.CSRFExemptAPIMiddleware')
    csrf_index = middleware_list.index('django.middleware.csrf.CsrfViewMiddleware')
    
    if csrf_exempt_index < csrf_index:
        print("‚úÖ Ordre du middleware correct (CSRFExempt avant CsrfView)")
    else:
        print("‚ùå Ordre du middleware incorrect")
        return False
    
    return True

def main():
    """
    Fonction principale de test.
    """
    print("üîí V√âRIFICATION DE LA CONFIGURATION DE S√âCURIT√â API\n")
    
    success = True
    
    # Test des permissions
    if not test_permissions():
        success = False
    
    # Test du middleware
    if not test_middleware():
        success = False
    
    print("\n" + "="*60)
    if success:
        print("üéâ TOUS LES TESTS PASS√âS AVEC SUCC√àS!")
        print("\nüìã R√âSUM√â DE LA CONFIGURATION:")
        print("‚Ä¢ CSRF d√©sactiv√© automatiquement pour toutes les URLs /api/")
        print("‚Ä¢ Formations: Lecture publique, √âcriture admin")
        print("‚Ä¢ Inscriptions: Cr√©ation publique, Gestion admin")
        print("‚Ä¢ Stages: Lecture publique, √âcriture admin")
        print("‚Ä¢ Candidatures: Cr√©ation publique, Gestion admin")
        print("‚Ä¢ R√©alisations: Lecture publique, √âcriture admin")
        print("‚Ä¢ Partenaires: Lecture publique, √âcriture admin")
        print("‚Ä¢ Authentification admin: Public (connexion)")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus et corrigez la configuration.")

if __name__ == "__main__":
    main()
